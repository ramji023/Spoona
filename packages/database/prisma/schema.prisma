generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String
  email        String   @unique
  password     String
  bio          String?
  profileImage String?
  token        String? // store refresh token
  // @relations between user and recipe
  recipes      Recipe[]

  // @relations between user and like
  likes Like[]

  // @relations between user and comment
  comments Comment[]

  //@relations between user and saved recipe
  savedRecipes SavedRecipe[]

  // @relations between user and community creator
  Community Community[]

  // relations between user and community member
  CommunityMembers CommunityMembers[]

  // relations between user and communityrecipe creator
  CommunityRecipe CommunityRecipe[]
  Planner         Planner[]
}

model Recipe {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(50)
  description String   @db.VarChar(200)
  cookTime    String   @db.VarChar(20)
  prepTime    String   @db.VarChar(20)
  imageUrl    String
  tags        String[]
  cuisines    String[]
  categories  String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // @relations between user and recipe
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // @relations between recipe and ingredients 
  ingredients Ingredient[]

  // @relations between recipe and instructions 
  instructions Instruction[]

  // @relations between recipe and like
  likes Like[]

  // @relations between recipe and comment
  comments Comment[]

  //@relations between user and saved recipe
  SavedRecipes    SavedRecipe[]
  CommunityRecipe CommunityRecipe[]
}

model Ingredient {
  id       String @id @default(uuid())
  name     String @db.VarChar(20)
  quantity String @db.VarChar(20)

  // @relations between recipe and ingredients 
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
}

model Instruction {
  id   String @id @default(uuid())
  step String

  // @relations between recipe and instructions 
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
}

model Like {
  id     String   @id @default(uuid())
  status likeType

  //@relation between user and like
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //@relation between recipe and like
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Comment {
  id    String @id @default(uuid())
  title String

  //@relation between user and like
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //@relation between recipe and like
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model SavedRecipe {
  id String @id @default(uuid())

  //@relation between user and savedRecipe
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //@relation between recipe and savedRecipe
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Community {
  id          String   @id @default(uuid())
  name        String
  description String
  coverImage  String
  createdAt   DateTime @default(now())

  // @relations between user and community creator 
  user             User               @relation(fields: [creatorId], references: [id])
  creatorId        String
  // relation between community member and community
  CommunityMembers CommunityMembers[]
  CommunityRecipe  CommunityRecipe[]
}

model CommunityMembers {
  id       String   @id @default(uuid())
  joinedAt DateTime @default(now())

  // relations between user and community member
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // relation between community member and community
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
}

model CommunityRecipe {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // relations between community and community recipe
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  //relations between recipe and community recipe
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String @unique

  //relation between user and community recipe
  postedBy User   @relation(fields: [userId], references: [id])
  userId   String
}

// <--------------- not for now   --------------->
model Planner {
  id String @id @default(uuid())

  //relation between user and planner
  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  name      String
  type      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  // relations between planner and plannerEntry
  PlannerEntry PlannerEntry?
}

model PlannerEntry {
  id String @id @default(uuid())

  // relations between planner and plannerEntry
  planner   Planner @relation(fields: [plannerId], references: [id])
  plannerId String  @unique
  urls      String
  recipeUrl String
}

enum likeType {
  like
  dislike
}
