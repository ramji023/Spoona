generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  username     String
  email        String  @unique
  password     String
  bio          String?
  profileImage String?

  // @relations between user and recipe
  recipes Recipe[]

  // @relations between user and like
  likes Like[]

  // @relations between user and comment
  comments Comment[]

  //@relations between user and saved recipe
  savedRecipes SavedRecipe[]
}

model Recipe {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(50)
  description String   @db.VarChar(200)
  cookTime    String   @db.VarChar(20)
  prepTime    String   @db.VarChar(20)
  imageUrl    String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // @relations between user and recipe
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // @relations between recipe and ingredients 
  ingredients Ingredient[]

  // @relations between recipe and instructions 
  instructions Instruction[]

  // @relations between recipe and like
  likes Like[]

  // @relations between recipe and comment
  comments    Comment[]

  //@relations between user and saved recipe
  SavedRecipe SavedRecipe[]
}

model Ingredient {
  id       String @id @default(uuid())
  name     String @db.VarChar(20)
  quantity String @db.VarChar(20)

  // @relations between recipe and ingredients 
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Instruction {
  id   String @id @default(uuid())
  step String

  // @relations between recipe and instructions 
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Like {
  id     String   @id @default(uuid())
  status likeType

  //@relation between user and like
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //@relation between recipe and like
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Comment {
  id    String @id @default(uuid())
  title String

  //@relation between user and like
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //@relation between recipe and like
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model SavedRecipe {
  id String @id @default(uuid())

  //@relation between user and savedRecipe
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //@relation between recipe and savedRecipe
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

enum likeType {
  like
  dislike
}
